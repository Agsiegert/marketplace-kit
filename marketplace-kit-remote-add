#!/usr/bin/env node

const program = require('commander'),
      fs = require('fs'),
      rl = require('readline'),
      request = require('request');

const checkParams = (params) => {
  if (!params.args.length) { params.help(); process.exit(1); }
  if (typeof params.email === 'undefined') { console.error('no email given!'); process.exit(1); }
  if (typeof params.url === 'undefined') { console.error('no URL given!'); process.exit(1); }
}

// turn to promise
const getPassword = (params) => {
  const reader = rl.createInterface({input: process.stdin, output: process.stdout});
  reader.stdoutMuted = true;
  reader.question('Password: ', (password) => {
    reader.close();
    const settings = { url: params.url, endpoint: params.endpoint, email: params.email };
    login(params.email, password, settings);
  });

  reader._writeToOutput = (stringToWrite) => {
    reader.stdoutMuted && reader.output.write('*') || reader.output.write(stringToWrite);
  };
}

program
  .version('0.3.0')
  .arguments('<endpoint>', 'endpoint of environment endpoint')
  .option('--email <email>', 'email')
  .option('--url <url>', 'instance endpoint')
  .action((endpoint, params) => {
    checkParams(params);
    getPassword(params);
  })

program.parse(process.argv);

const login = (email, password, settings) => {
  request({
    uri: settings.url + 'api/marketplace_builder/sessions',
    method: 'POST',
    json: {email, password}
  }, function (error, response, body) {
    if(error) {
      console.error(error);
      process.exit(1);
    }
    if (body.token){
      storeEndpoint(
        Object.assign(settings, { token: body.token })
      );
    } else {
      console.log(`\nError: ${body.error}`);
    }
  });
}

const storeEndpoint = (settings) => {
  const endpointSettings = {
    [settings.endpoint]: {
      url: settings.url,
      token: settings.token,
      email: settings.email
    }
  };
  saveFile(endpointSettings);
}

const saveFile = (settings) => {
  fs.writeFileSync('.marketplace-kit', JSON.stringify(settings), (err) => {
    if (err) throw err;
  });
}
