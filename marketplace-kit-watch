#!/usr/bin/env node

const program = require('commander'),
  request = require('request'),
  fs = require('fs'),
  watch = require('node-watch');

const shouldBeSynced = (filename) => {
  const script = file.split('.').pop();

  return program.files.split(',').includes(script);
};

program
  .version('0.3.0')
  .option('--api-key <apiKey>', 'your API KEY', process.env.MARKETPLACE_API_KEY)
  .option('--url <url>', 'instance endpoint', process.env.MARKETPLACE_URL)
  .option('--files <files>', 'watch files', process.env.FILES || 'js,css,liquid,graphql')
  .parse(process.argv);

if (typeof program.apiKey === 'undefined') {
  console.error('no API KEY given!');
  process.exit(1);
}
if (typeof program.url === 'undefined') {
  console.error('no URL given!');
  process.exit(1);
}

console.log('Sync mode enabled.');

watch('marketplace_builder/', { recursive: true }, (e, file) => {
  shouldBeSynced(file) && pushFile(file);
});

const pushFile = (path) => {
  request({
    uri: program.url + 'api/marketplace_builder/marketplace_releases/sync',
    method: 'PUT',
    headers: { 'UserTemporaryToken': program.apiKey },
    formData: {
      path: path.replace('marketplace_builder/',''),
      marketplace_builder_file_body: fs.createReadStream(path)
    }
  }, (error, response, body) => {
    if (error) {
      console.error(body);
      exit(1);
    } else {
      console.log(`syncing: ${file} done`);
    }
  });
};
