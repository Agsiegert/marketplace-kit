module MarketplaceKit
  module Services
    class Config
      def load(endpoint_name)
        @config = {}
        @endpoint = endpoint_name

        load_config_from '.builder'
        load_config_from '.builder-autogenerated', required: false

        raise Errors::MarketplaceError.new 'Error: Invalid env passed!' if @config[@endpoint].nil?
      rescue Errno::ENOENT
        raise Errors::MarketplaceError.new 'Please create .builder file in order to continue.'
      end

      def token
        @config[@endpoint]['token'].to_s
      end

      def set_token(value)
        @config[@endpoint]['token'] = value
        save_token(value)
      end

      def url
        @config[@endpoint]['url'].to_s
      end

      def default_endpoint
        'localhost'
        # require 'pry'; binding.pry
        # @config.find('localhost'.freeze) { |endpoint| endpoint['default'] }
      end

      private

      def load_config_from(file_name, options = {})
        return if options[:required] == false && !File.exist?("#{MarketplaceKit.builder_folder}.builder-autogenerated")

        text_config = File.read("#{MarketplaceKit.builder_folder}#{file_name}")
        @config.deeper_merge! JSON.parse(text_config)
      end

      def save_token(value)
        config = autogenerated_config.merge({ @endpoint => { token: value } })
        File.write("#{MarketplaceKit.builder_folder}.builder-autogenerated", config.to_json)
      end

      def autogenerated_config
        return {} unless File.exist?("#{MarketplaceKit.builder_folder}.builder-autogenerated")

        raw_config = File.read("#{MarketplaceKit.builder_folder}.builder-autogenerated")
        JSON.parse raw_config
      end
    end
  end
end
